    - name: Determine if laptop
      command: laptop-detect
      register: is_laptop
      ignore_errors: yes

    - name: Install hwinfo
      apt: pkg=hwinfo
      become: yes

    - name: Determine if nVidia graphics card
      shell: hwinfo --gfxcard | fgrep "Model:" | fgrep -i nvidia
      register: is_nvidia
      ignore_errors: yes

    - name: Determine if intel graphics card
      shell: hwinfo --gfxcard | fgrep "Model:" | fgrep -i intel
      register: is_intel_graphics
      ignore_errors: yes

    - name: Determine product name
      shell: dmidecode -s system-product-name
      become: yes
      register: product_name

    - name: Determine bios version
      shell: dmidecode -s bios-version
      become: yes
      register: bios_version

    - name: Create home directories
      file: path=~/{{ item }} state=directory
      with_items:
      - Installs
      - .config/terminator
      - .config/touchegg

    - name: Symlink ~/Installs
      file: src=~/Installs dest=/tmp/Installs state=link

    - name: Install base packages
      apt: pkg={{ item }}
      become: yes
      with_items:
      - automake
      - build-essential
      - cmake
      - libboost-all-dev
      - libcurl4-gnutls-dev
      - libcurl4-openssl-dev
      - libffi-dev
      - libgmp-dev
      - libgstreamer0.10-0
      - libgstreamer-plugins-base0.10-0
      - libjansson-dev
      - libjsoncpp-dev
      - libjsonrpccpp-dev
      - libleveldb-dev
      - libmicrohttpd-dev
      - libqrencode-dev
      - libreadline-dev
      - libssl-dev
      - libxcomposite1
      - libxrender1
      - libxslt1-dev
      - mesa-common-dev
      - ocl-icd-libopencl1
      - opencl-headers
      - python3
      - python3-dev
      - python-dev
      - python-gpgme
      - python-pip
      - python-software-properties
      - rpm

    - name: Setup workspaces
      command: gsettings set org.compiz.core:/org/compiz/profiles/unity/plugins/core/ {{ item.key }} {{ item.value }}
      with_items:
      - {key: hsize, value: 2}
      - {key: vsize, value: 2}

    - name: Install Synapse launcher
      apt: pkg=synapse
      become: yes

    - name: Install AutoKey text expansion tool
      apt: pkg=autokey-gtk
      become: yes

    - name: Installing libimobiledevice-utils for iPhone
      apt: pkg=libimobiledevice-utils
      become: yes

    - name: Install gnote note taking application
      apt: pkg=gnote
      become: yes

    - name: Install TaskWarrior To-Do
      apt: pkg=task
      become: yes

    - name: Add Go For It To-Do application repostiory
      apt_repository: repo="ppa:mank319/go-for-it" update_cache=yes
      become: yes

    - name: Install Go For It To-Do application
      apt: pkg=go-for-it
      become: yes

    - name: Install Address Book
      apt: pkg=address-book-app
      become: yes

    - name: Install chromium web browser
      apt: pkg=chromium-browser
      become: yes

    - name: Add Tor Browser repository
      apt_repository: repo="ppa:webupd8team/tor-browser" update_cache=yes
      become: yes

    - name: Install Tor Browser web browser
      apt: pkg=tor-browser
      become: yes

    - name: Remove transmission BitTorrent client
      apt: pkg=transmission-gtk state=absent
      become: yes

    - name: Install Deluge BitTorrent client
      apt: pkg=deluge
      become: yes

    - name: Install uGet download manager
      apt: pkg=uget
      become: yes

    - name: Install git source control
      apt: pkg=git-core
      become: yes

    - name: Install gitg git GUI
      apt: pkg=gitg
      become: yes

    - name: Set vim as git editor
      git_config: name=core.editor scope=global value=vim

    - name: Install subversion source control
      apt: pkg=subversion
      become: yes

    - name: Install i3 tiling window manager
      apt: pkg={{ item }}
      with_items:
      - i3
      - i3-wm
      - i3blocks
      become: yes

    - name: Install terminator terminal emulator
      apt: pkg=terminator
      become: yes

    - name: Copy terminator configuration
      copy: src=terminator.config dest=~/.config/terminator/config

    - name: Install Midnight Commander file manager
      apt: pkg=mc
      become: yes

    - name: Install command line XML processing tools
      apt: pkg=xml-twig-tools
      become: yes

    - name: Install icdiff side by side diff tool
      pip: name=icdiff
      become: yes

    - name: Install hfsprogs for working with HFS/HFS+ disk formats
      apt: pkg=hfsprogs
      become: yes

    - name: Install SSH server
      apt: pkg=openssh-server
      become: yes

    - name: Install sshpass
      apt: pkg=sshpass
      become: yes

    - name: Disable SSHD startup
      shell: update-rc.d ssh disable
      become: yes

    - name: Install rbenv ruby version control
      apt: pkg={{ item }}
      become: yes
      with_items:
      - rbenv
      - ruby-build

    - name: Add user to user groups
      user: name={{ ansible_user_id }} groups={{ item }} append=yes
      with_items:
      - pcp
      - docker
      become: yes

    - name: Install vim plugins
      git: repo={{ item.repo }} dest=~/.vim/bundle/{{ item.dest }}
      with_items:
      - {repo: "https://github.com/plasticboy/vim-markdown.git", dest: vim-markdown}
      - {repo: "https://github.com/IN3D/vim-raml.git", dest: vim-raml}
      - {repo: "https://github.com/Valloric/YouCompleteMe.git", dest: YouCompleteMe}
      - {repo: "https://github.com/aklt/plantuml-syntax.git", dest: plantuml-syntax}

    - name: Update vim configuration
      lineinfile: dest=~/.vimrc line="{{ item }}"
      with_items:
      - let g:vim_markdown_folding_style_pythonic = 1

    - name: Install YouCompleteMe
      shell: ./install.sh chdir=~/.vim/bundle/YouCompleteMe

    - name: Download .deb
      get_url: url={{ item.url }} dest=~/Installs/{{ item.name }} checksum={{ item.sha }}
      with_items: "{{ installs }}"
      register: get_url_result
      until: get_url_result | succeeded
      retries: 3
      delay: 1

    - name: Install .deb
      apt: deb=/tmp/Installs/{{ item.name }}
      become: yes
      with_items: "{{ installs }}"

    - name: Get JetBrains toolbox
      get_url: url=https://download-cf.jetbrains.com/toolbox/jetbrains-toolbox-1.1.2143.tar.gz dest=~/Installs/jetbrains-toolbox-1.1.2143.tar.gz
      register: jet_brains_get_url_result
      until: jet_brains_get_url_result | succeeded
      retries: 3
      delay: 1

    - name: Extract JetBrains toolbox
      unarchive: src=~/Installs/jetbrains-toolbox-1.1.2143.tar.gz remote_src=yes dest=/tmp

    - name: Copy JetBrains toolbox
      copy: src=/tmp/jetbrains-toolbox-1.1.2143/jetbrains-toolbox remote_src=yes dest=/usr/bin/jetbrains-toolbox mode=0755
      become: yes

    - name: Install PlantUML diagramming tool
      apt: pkg=plantuml
      become: yes

    - name: Update .bashrc
      blockinfile:
        dest: ~/.bashrc
        backup: yes
        block: "{{ lookup('file', 'bashrc') }}"

    - name: Add rbenv to .bashrc
      lineinfile: dest=~/.bashrc line='eval "$(rbenv init -)"'

    - name: Install global NPM packages
      npm: name={{ item.name }} version={{ item.version }} global=yes
      become: yes
      with_items:
      - {name: raml-cop, version: 3.0.0}
      - {name: raml2html, version: 5.0.0}
      - {name: gulp-cli, version: 1.2.2}

    - name: Install Hardware Enablement (HWE) stack
      apt: pkg={{ item }}
      become: yes
      with_items:
      - linux-generic-hwe-16.04
      - xserver-xorg-hwe-16.04

    - name: Install Laptop Mode Tools
      apt: pkg=laptop-mode-tools
      when: is_laptop|succeeded
      become: yes

    - name: Configure Laptop Mode Tools to avoid autosuspend of usbhid
      lineinfile: dest=/etc/laptop-mode/conf.d/runtime-pm.conf regexp='AUTOSUSPEND_RUNTIME_DEVTYPE_BLACKLIST.*' line='AUTOSUSPEND_RUNTIME_DEVTYPE_BLACKLIST="usbhid"'
      when: is_laptop|succeeded
      become: yes

    - name: Install multitouch gesture recognizer
      apt: pkg=touchegg
      when: is_laptop|succeeded
      become: yes

    - name: Copy touchegg configuration
      copy: src={{ item.source }} dest={{ item.destination }}
      when: is_laptop|succeeded
      with_items:
      - {source: touchegg.conf, destination: ~/.config/touchegg/touchegg.conf}
      - {source: xprofile, destination: ~/.xprofile}

    - name: Download CUDA repository .deb
      get_url: url=http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_9.1.85-1_amd64.deb dest=~/Installs/cuda-repo-ubuntu1604_9.1.85-1_amd64.deb
      register: get_deb_result
      when: is_nvidia|succeeded
      until: get_deb_result | succeeded
      retries: 3
      delay: 1

    - name: Install CUDA repository
      apt: deb=/tmp/Installs/cuda-repo-ubuntu1604_9.1.85-1_amd64.deb
      when: is_nvidia|succeeded
      become: yes

    - name: Install CUDA
      apt: pkg=cuda update_cache=yes
      become: yes

    - name: Set nVidia graphics as default
      command: prime-select nvidia
      when: is_nvidia|succeeded and is_laptop|succeeded
      become: yes

    - name: Add Minecraft repository
      apt_repository: repo="ppa:minecraft-installer-peeps/minecraft-installer" update_cache=yes
      become: yes

    - name: Install Minecraft
      apt: pkg=minecraft-installer
      become: yes

    - name: Setup NFS
      apt: pkg={{ item }}
      become: yes
      with_items:
      - nfs-kernel-server
      - nfs-common

    - name: Create remote user
      user: name=remote
      become: yes

    - name: Create remote user SSH directory
      file: path=/home/remote/.ssh state=directory mode=700 owner=remote group=remote
      become: yes
